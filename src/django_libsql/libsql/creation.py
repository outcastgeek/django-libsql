"""
Custom database creation for libSQL/Turso to handle test databases.
"""

from django.db.backends.sqlite3.creation import (
    DatabaseCreation as SQLiteDatabaseCreation,
)
from django.core.management import call_command
from django.db import connection
from django.test import TransactionTestCase


class DatabaseCreation(SQLiteDatabaseCreation):
    """
    Custom database creation for libSQL that properly handles Turso URLs.
    """

    def _get_test_db_name(self):
        """
        Get the test database name.
        """
        test_database_name = self.connection.settings_dict.get("TEST", {}).get("NAME")
        if test_database_name:
            return test_database_name
        return super()._get_test_db_name()

    def create_test_db(
        self, verbosity=1, autoclobber=False, serialize=True, keepdb=False
    ):
        """
        Create a test database, ensuring migrations run for Turso databases.
        """
        test_database_name = self._get_test_db_name()

        # Check if this is a Turso URL
        if test_database_name and (
            test_database_name.startswith("libsql://")
            or test_database_name.startswith("wss://")
            or test_database_name.startswith("https://")
        ):
            if verbosity >= 1:
                self.log(f"Using Turso database for tests: {test_database_name}")

            # Update connection to use test database
            self.connection.settings_dict["NAME"] = test_database_name

            # Ensure migrations are run on the Turso database
            if not keepdb:
                if verbosity >= 1:
                    self.log("Running migrations on Turso database...")

                # Just run migrations without dropping tables
                # This ensures tables exist for all tests including threading
                call_command(
                    "migrate",
                    verbosity=0,
                    interactive=False,
                    database=self.connection.alias,
                    run_syncdb=True,
                )

            return test_database_name

        # Otherwise use default SQLite behavior
        return super().create_test_db(verbosity, autoclobber, serialize, keepdb)

    def _destroy_test_db(self, test_database_name, verbosity):
        """
        Destroy the test database. For Turso URLs, clean up test data only.
        """
        # Check if this is a Turso URL
        if test_database_name and (
            test_database_name.startswith("libsql://")
            or test_database_name.startswith("wss://")
            or test_database_name.startswith("https://")
        ):
            if verbosity >= 1:
                self.log(f"Cleaning up Turso database: {test_database_name}")

            # For Turso databases, we don't drop tables in destroy
            # Tables will be cleaned/recreated in create_test_db if needed
            return

        # Otherwise use default SQLite behavior
        super()._destroy_test_db(test_database_name, verbosity)

    def deserialize_db_from_string(self, data):
        """
        Reload the database with data from a string generated by
        the serialize_db_to_string() method.

        For Turso databases, we don't drop/recreate tables - just clean data.
        """
        # Check if we're using a Turso database
        test_database_name = self._get_test_db_name()
        if test_database_name and (
            test_database_name.startswith("libsql://")
            or test_database_name.startswith("wss://")
            or test_database_name.startswith("https://")
        ):
            # For Turso databases, ensure tables exist but don't drop them
            # This is critical for threading tests where multiple connections
            # need to see the same tables

            # For Turso databases, ALWAYS clean data thoroughly
            with self.connection.cursor() as cursor:
                try:
                    # First ensure tables exist
                    cursor.execute(
                        "SELECT COUNT(*) FROM sqlite_master WHERE type='table' AND name='books_book'"
                    )
                    if cursor.fetchone()[0] == 0:
                        # Tables don't exist, run migrations
                        self.log(
                            "Tables missing in deserialize_db_from_string, running migrations..."
                        )
                        call_command(
                            "migrate",
                            verbosity=0,
                            interactive=False,
                            database=self.connection.alias,
                            run_syncdb=True,
                        )

                    # ALWAYS clean ALL test data (foreign keys first)
                    cursor.execute("DELETE FROM books_review")
                    cursor.execute("DELETE FROM books_book")

                    # Clean any test data from performance tests
                    cursor.execute(
                        "DELETE FROM gil_test_performance WHERE data LIKE '%Test%'"
                    )

                    # Reset auto-increment sequences if they exist
                    cursor.execute(
                        "DELETE FROM sqlite_sequence WHERE name IN ('books_book', 'books_review')"
                    )

                    self.connection.commit()

                except Exception as e:
                    # If cleanup fails, try to continue but log the error
                    self.log(f"Database cleanup warning: {e}")
        else:
            # For non-Turso databases, use parent method
            super().deserialize_db_from_string(data)

    def _execute_create_test_db(self, cursor, parameters, keepdb=False):
        """Execute the test database creation for Turso."""
        # For Turso databases, we don't actually create a new database
        # We use the existing one
        test_database_name = self._get_test_db_name()
        if test_database_name and (
            test_database_name.startswith("libsql://")
            or test_database_name.startswith("wss://")
            or test_database_name.startswith("https://")
        ):
            # Nothing to do - database already exists
            return
        else:
            # For non-Turso databases, use parent method
            super()._execute_create_test_db(cursor, parameters, keepdb)

    def serialize_db_to_string(self):
        """
        Serialize all data in the database into a JSON string.

        For Turso databases, we just return empty data since we handle cleanup differently.
        """
        test_database_name = self._get_test_db_name()
        if test_database_name and (
            test_database_name.startswith("libsql://")
            or test_database_name.startswith("wss://")
            or test_database_name.startswith("https://")
        ):
            # For Turso databases, return empty serialization
            # We handle cleanup in deserialize_db_from_string
            return ""

        # For non-Turso databases, use parent method
        return super().serialize_db_to_string()
